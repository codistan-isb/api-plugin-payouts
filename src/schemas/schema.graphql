type Payout implements Node {
  _id: ID!
  totalPrice: Float
  fee: Float
  amount: Float
  itemId: ID
  productId: ID
  orderId: ID
  subOrderId: ID
  internalOrderId: ID
  sellerId: ID
  workflow: [String!]!
  status: PaymentStatus!
  createdAt: String
  updatedAt: String
  sellerInfo: sellerInfo
  productInfo: productInfo
  Date: String
  productTitle: String
  productSlug: String
  sellerBankDetails: bankDetailsPayload
  storeName: String
  productDisplayTitle: String
}
type PayoutResponse {
  _id: ID!
  totalPrice: Float
  fee: Float
  amount: Float
  itemId: ID
  productId: ID
  orderId: ID
  subOrderId: ID
  sellerId: ID
  internalOrderId: ID
  workflow: [String!]!
  status: PaymentStatus!
  reason: String
  referenceNumber: String
  createdAt: String
  updatedAt: String
  sellerInfo: sellerInfo
  productInfo: productInfo
}
type productInfo {
  _id: ID
  title: String
  referenceId:String
}
type bankDetailsPayload {
  type: String
  bankName: String
  bankAccountNumber: String
}
type sellerInfo {
  _id: ID
  phone: String
  name: String
  storeName: String
  accountDetails: bankDetailsPayload
}

type Payment {
  _id: ID!
  referenceNumber: String
  reason: String
  status: PaymentStatus!
  workflow: [String]
}

enum PaymentStatus {
  adjustments
  approved
  canceled
  completed
  created
  new
  paid
  error
  partialRefund
  refunded
}
type getAllPaymentsConnection {
  "The list of nodes that match the query, wrapped in an edge to provide a cursor string for each"
  edges: [getAllPaymentsEdge]
  """
  You can request the `nodes` directly to avoid the extra wrapping that `NodeEdge` has,
  if you know you will not need to paginate the results.
  """
  nodes: [Payout]
  "Information to help a client request the next or previous page"
  pageInfo: PageInfo!
  "The total number of nodes that match your query"
  totalCount: Int!
}

type getAllPaymentsEdge implements NodeEdge {
  "The cursor that represents this node in the paginated results"
  cursor: ConnectionCursor!
  "The Transaction"
  node: Payout
}

extend type Query {
  sellerPaymentHistory(
    sellerId: ID!
    after: ConnectionCursor

    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor

    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt

    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt

    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int

    "Return results sorted in this order"
    sortOrder: SortOrder = desc
    shopId: ID!
  ): getAllPaymentsConnection
  getAllPayouts(
    sellerId: ID
    status: PaymentStatus
    orderId: ID
    productId: String
    productTitle: String
    internalOrderId: String
    startDate: String
    endDate: String
    searchQuery: String
    "Return only results that come after this cursor. Use this with `first` to specify the number of results to return."
    after: ConnectionCursor
    "Return only results that come before this cursor. Use this with `last` to specify the number of results to return."
    before: ConnectionCursor
    "Return at most this many results. This parameter may be used with either `after` or `offset` parameters."
    first: ConnectionLimitInt
    "Return at most this many results. This parameter may be used with the `before` parameter."
    last: ConnectionLimitInt
    "Return only results that come after the Nth result. This parameter may be used with the `first` parameter."
    offset: Int
    "Return results sorted in this order"
    sortOrder: SortOrder = asc
    "By default, groups are sorted by when they were created, oldest first. Set this to sort by one of the other allowed fields"
    sortBy: AccountSortByField = timeSent
  ): getAllPaymentsConnection
}

extend type Mutation {
  updatePaymentStatus(
    _id: ID!
    referenceNumber: String
    reason: String
    status: PaymentStatus
  ): PayoutResponse
}
